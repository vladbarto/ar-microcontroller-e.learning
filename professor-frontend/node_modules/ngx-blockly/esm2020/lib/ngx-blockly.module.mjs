import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';
import { NgxBlocklyComponent } from './ngx-blockly/ngx-blockly.component';
import * as Blockly from 'blockly/core';
import * as i0 from "@angular/core";
export class NgxBlocklyModule {
}
NgxBlocklyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgxBlocklyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxBlocklyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: NgxBlocklyModule, declarations: [NgxBlocklyComponent], exports: [NgxBlocklyComponent] });
NgxBlocklyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgxBlocklyModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NgxBlocklyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgxBlocklyComponent],
                    imports: [],
                    exports: [NgxBlocklyComponent],
                    providers: [],
                    schemas: [NO_ERRORS_SCHEMA]
                }]
        }] });
// Still needed?
// Blockly.ToolboxCategory.prototype.parseContents_ = function (categoryDef) {
//     const contents = categoryDef['contents'];
//     if (categoryDef['custom']) {
//         this.flyoutItems_ = categoryDef['custom'];
//     } else if (contents) {
//         for (let i = 0, itemDef; (itemDef = contents[i]); i++) {
//             const flyoutItem = (itemDef);
//             this.flyoutItems_.push(flyoutItem);
//         }
//     }
//     if (categoryDef['categoryclass']) {
//         this.cssConfig_.row += ' ' + categoryDef['categoryclass'];
//     }
// };
Blockly.CollapsibleToolboxCategory.prototype.parseContents_ = function (categoryDef) {
    const contents = categoryDef['contents'];
    let prevIsFlyoutItem = true;
    if (categoryDef['custom']) {
        this.flyoutItems_ = categoryDef['custom'];
    }
    else if (contents) {
        for (let i = 0, itemDef; (itemDef = contents[i]); i++) {
            // Separators can exist as either a flyout item or a toolbox item so
            // decide where it goes based on the type of the previous item.
            if (!Blockly.registry.hasItem(Blockly.registry.Type.TOOLBOX_ITEM, itemDef['kind']) ||
                (itemDef['kind'].toLowerCase() === Blockly.ToolboxSeparator.registrationName &&
                    prevIsFlyoutItem)) {
                const flyoutItem = (itemDef);
                this.flyoutItems_.push(flyoutItem);
                prevIsFlyoutItem = true;
            }
            else {
                this.createToolboxItem_(itemDef);
                prevIsFlyoutItem = false;
            }
        }
    }
    if (categoryDef['categoryclass']) {
        this.cssConfig_.row += ' ' + categoryDef['categoryclass'];
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJsb2NrbHkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWJsb2NrbHkvc3JjL2xpYi9uZ3gtYmxvY2tseS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEtBQUssT0FBTyxNQUFNLGNBQWMsQ0FBQzs7QUFTeEMsTUFBTSxPQUFPLGdCQUFnQjs7OEdBQWhCLGdCQUFnQjsrR0FBaEIsZ0JBQWdCLGlCQU5WLG1CQUFtQixhQUV4QixtQkFBbUI7K0dBSXBCLGdCQUFnQjs0RkFBaEIsZ0JBQWdCO2tCQVA1QixRQUFRO21CQUFDO29CQUNOLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNuQyxPQUFPLEVBQUUsRUFBRTtvQkFDWCxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDOUIsU0FBUyxFQUFFLEVBQUU7b0JBQ2IsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQzlCOztBQUlELGdCQUFnQjtBQUNoQiw4RUFBOEU7QUFDOUUsZ0RBQWdEO0FBQ2hELG1DQUFtQztBQUNuQyxxREFBcUQ7QUFDckQsNkJBQTZCO0FBQzdCLG1FQUFtRTtBQUNuRSw0Q0FBNEM7QUFDNUMsa0RBQWtEO0FBQ2xELFlBQVk7QUFDWixRQUFRO0FBQ1IsMENBQTBDO0FBQzFDLHFFQUFxRTtBQUNyRSxRQUFRO0FBQ1IsS0FBSztBQUVMLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsV0FBVztJQUMvRSxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekMsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDNUIsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDN0M7U0FBTSxJQUFJLFFBQVEsRUFBRTtRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkQsb0VBQW9FO1lBQ3BFLCtEQUErRDtZQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDOUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQjtvQkFDeEUsZ0JBQWdCLENBQUMsRUFBRTtnQkFDdkIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLGdCQUFnQixHQUFHLElBQUksQ0FBQzthQUMzQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2pDLGdCQUFnQixHQUFHLEtBQUssQ0FBQzthQUM1QjtTQUNKO0tBQ0o7SUFDRCxJQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRTtRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQzdEO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE5PX0VSUk9SU19TQ0hFTUEgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEJsb2NrbHlDb21wb25lbnQgfSBmcm9tICcuL25neC1ibG9ja2x5L25neC1ibG9ja2x5LmNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBCbG9ja2x5IGZyb20gJ2Jsb2NrbHkvY29yZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbTmd4QmxvY2tseUNvbXBvbmVudF0sXG4gICAgaW1wb3J0czogW10sXG4gICAgZXhwb3J0czogW05neEJsb2NrbHlDb21wb25lbnRdLFxuICAgIHByb3ZpZGVyczogW10sXG4gICAgc2NoZW1hczogW05PX0VSUk9SU19TQ0hFTUFdXG59KVxuZXhwb3J0IGNsYXNzIE5neEJsb2NrbHlNb2R1bGUge1xufVxuXG4vLyBTdGlsbCBuZWVkZWQ/XG4vLyBCbG9ja2x5LlRvb2xib3hDYXRlZ29yeS5wcm90b3R5cGUucGFyc2VDb250ZW50c18gPSBmdW5jdGlvbiAoY2F0ZWdvcnlEZWYpIHtcbi8vICAgICBjb25zdCBjb250ZW50cyA9IGNhdGVnb3J5RGVmWydjb250ZW50cyddO1xuLy8gICAgIGlmIChjYXRlZ29yeURlZlsnY3VzdG9tJ10pIHtcbi8vICAgICAgICAgdGhpcy5mbHlvdXRJdGVtc18gPSBjYXRlZ29yeURlZlsnY3VzdG9tJ107XG4vLyAgICAgfSBlbHNlIGlmIChjb250ZW50cykge1xuLy8gICAgICAgICBmb3IgKGxldCBpID0gMCwgaXRlbURlZjsgKGl0ZW1EZWYgPSBjb250ZW50c1tpXSk7IGkrKykge1xuLy8gICAgICAgICAgICAgY29uc3QgZmx5b3V0SXRlbSA9IChpdGVtRGVmKTtcbi8vICAgICAgICAgICAgIHRoaXMuZmx5b3V0SXRlbXNfLnB1c2goZmx5b3V0SXRlbSk7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgaWYgKGNhdGVnb3J5RGVmWydjYXRlZ29yeWNsYXNzJ10pIHtcbi8vICAgICAgICAgdGhpcy5jc3NDb25maWdfLnJvdyArPSAnICcgKyBjYXRlZ29yeURlZlsnY2F0ZWdvcnljbGFzcyddO1xuLy8gICAgIH1cbi8vIH07XG5cbkJsb2NrbHkuQ29sbGFwc2libGVUb29sYm94Q2F0ZWdvcnkucHJvdG90eXBlLnBhcnNlQ29udGVudHNfID0gZnVuY3Rpb24gKGNhdGVnb3J5RGVmKSB7XG4gICAgY29uc3QgY29udGVudHMgPSBjYXRlZ29yeURlZlsnY29udGVudHMnXTtcbiAgICBsZXQgcHJldklzRmx5b3V0SXRlbSA9IHRydWU7XG4gICAgaWYgKGNhdGVnb3J5RGVmWydjdXN0b20nXSkge1xuICAgICAgICB0aGlzLmZseW91dEl0ZW1zXyA9IGNhdGVnb3J5RGVmWydjdXN0b20nXTtcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnRzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpdGVtRGVmOyAoaXRlbURlZiA9IGNvbnRlbnRzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICAvLyBTZXBhcmF0b3JzIGNhbiBleGlzdCBhcyBlaXRoZXIgYSBmbHlvdXQgaXRlbSBvciBhIHRvb2xib3ggaXRlbSBzb1xuICAgICAgICAgICAgLy8gZGVjaWRlIHdoZXJlIGl0IGdvZXMgYmFzZWQgb24gdGhlIHR5cGUgb2YgdGhlIHByZXZpb3VzIGl0ZW0uXG4gICAgICAgICAgICBpZiAoIUJsb2NrbHkucmVnaXN0cnkuaGFzSXRlbShCbG9ja2x5LnJlZ2lzdHJ5LlR5cGUuVE9PTEJPWF9JVEVNLCBpdGVtRGVmWydraW5kJ10pIHx8XG4gICAgICAgICAgICAgICAgKGl0ZW1EZWZbJ2tpbmQnXS50b0xvd2VyQ2FzZSgpID09PSBCbG9ja2x5LlRvb2xib3hTZXBhcmF0b3IucmVnaXN0cmF0aW9uTmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICBwcmV2SXNGbHlvdXRJdGVtKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZseW91dEl0ZW0gPSAoaXRlbURlZik7XG4gICAgICAgICAgICAgICAgdGhpcy5mbHlvdXRJdGVtc18ucHVzaChmbHlvdXRJdGVtKTtcbiAgICAgICAgICAgICAgICBwcmV2SXNGbHlvdXRJdGVtID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVUb29sYm94SXRlbV8oaXRlbURlZik7XG4gICAgICAgICAgICAgICAgcHJldklzRmx5b3V0SXRlbSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjYXRlZ29yeURlZlsnY2F0ZWdvcnljbGFzcyddKSB7XG4gICAgICAgIHRoaXMuY3NzQ29uZmlnXy5yb3cgKz0gJyAnICsgY2F0ZWdvcnlEZWZbJ2NhdGVnb3J5Y2xhc3MnXTtcbiAgICB9XG59O1xuXG4iXX0=