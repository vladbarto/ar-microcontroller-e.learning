import { UUID } from 'angular2-uuid';
import * as Blockly from 'blockly/core';
export class NgxBlocklyToolbox extends Blockly.Toolbox {
    constructor(workspace) {
        super(workspace);
        this.SEARCH_CATEGORY = 'SEARCH_CATEGORY';
        this.SEARCH_PLACEHOLDER = 'SEARCH_PLACEHOLDER';
        this._SEARCHBAR_CLASS = 'searchbar';
        this._TOOLBAR_CLASS = 'toolbar';
        this._categoryId = UUID.UUID();
        this._categoryExpandedCache = new Map();
        workspace.addChangeListener(this._onWorkspaceChange.bind(this));
    }
    init() {
        super.init();
        this._initSearchbar();
    }
    render(parsedToolboxDef) {
        if (parsedToolboxDef.contents.length === 0 || parsedToolboxDef.contents[0].toolboxitemid !== this._categoryId) {
            const name = Blockly.Msg[this.SEARCH_CATEGORY] ? Blockly.Msg[this.SEARCH_CATEGORY] : 'Search';
            const xmlDef = '<xml>' +
                '<category colour="#ccc" expanded="false" name="' + name + '" hidden="true" toolboxitemid="' + this._categoryId + '"></category>' +
                '</xml>';
            const jsonDef = Blockly.utils.toolbox.convertToolboxDefToJson(xmlDef);
            parsedToolboxDef.contents = [jsonDef.contents[0]].concat(parsedToolboxDef.contents);
        }
        super.render(parsedToolboxDef);
        this._restoreExpandedState();
    }
    clearSearch() {
        this._clearSearchResult();
        if (this._input) {
            this._input.value = '';
        }
    }
    toXML() {
        let xml = '<xml id="toolbox" style="display: none">';
        if (this._nodes) {
            for (const node of this._nodes) {
                xml += node.toXML();
            }
        }
        xml += '</xml>';
        return xml;
    }
    get nodes() {
        return this._nodes;
    }
    set nodes(nodes) {
        this._nodes = nodes;
    }
    _initSearchbar() {
        this._input = document.createElement('input');
        this._input.placeholder = Blockly.Msg[this.SEARCH_PLACEHOLDER] ? Blockly.Msg[this.SEARCH_PLACEHOLDER] : 'search';
        this._input.className = this._SEARCHBAR_CLASS;
        this._input.size = 1;
        this._input.addEventListener('keyup', this._search.bind(this));
        const element = this.HtmlDiv.firstChild;
        element.classList.add(this._TOOLBAR_CLASS);
        this.HtmlDiv.insertBefore(this._input, element);
    }
    _search(event) {
        clearTimeout(this._timeout);
        this._timeout = setTimeout(() => {
            const searchKey = event.target.value.trim();
            if (searchKey.length > 0) {
                const result = this._recursiveSearch(searchKey, this.toolboxDef_);
                if (result.length > 0) {
                    const category = this.getToolboxItemById(this._categoryId);
                    category.updateFlyoutContents(result);
                    category.show();
                    this.setSelectedItem(category);
                }
                else {
                    this._clearSearchResult();
                }
            }
            else {
                this._clearSearchResult();
            }
        }, 100);
    }
    _recursiveSearch(searchKey, child) {
        let blockDefs = [];
        if (child.contents && Array.isArray(child.contents)) {
            if (child.toolboxitemid && child.toolboxitemid === this._categoryId) {
                return blockDefs;
            }
            for (let i = 0; i < child.contents.length; i++) {
                if (typeof (child.contents[i]) === 'object' && child.contents[i].kind) {
                    if (child.contents[i].kind === 'BLOCK' && child.contents[i].type) {
                        const type = child.contents[i].type;
                        if (this._compare(searchKey, type)) {
                            blockDefs.push(child.contents[i]);
                        }
                        else {
                            const workspace = new Blockly.Workspace();
                            const searchBlock = workspace.newBlock(type);
                            if (this._compare(searchKey, searchBlock.tooltip.toString())) {
                                blockDefs.push(child.contents[i]);
                            }
                            workspace.dispose();
                        }
                    }
                    else if (child.contents[i].kind === 'CATEGORY') {
                        const result = this._recursiveSearch(searchKey, child.contents[i]);
                        blockDefs = [...blockDefs, ...result];
                    }
                }
            }
        }
        return blockDefs;
    }
    _clearSearchResult() {
        const flyout = this.workspace_.getFlyout();
        if (flyout) {
            flyout.hide();
        }
        const category = this.getToolboxItemById(this._categoryId);
        if (category) {
            category.hide();
        }
    }
    _storeExpandedState() {
        this.getToolboxItems().forEach(item => {
            if (item.getId() !== this._categoryId) {
                const collapsibleItem = item;
                if (typeof collapsibleItem.isExpanded === 'function') {
                    this._categoryExpandedCache.set(collapsibleItem.getId(), collapsibleItem.isExpanded());
                }
            }
        });
    }
    _restoreExpandedState() {
        this._categoryExpandedCache.forEach((expanded, id) => {
            const collapsibleItem = this.getToolboxItemById(id);
            if (collapsibleItem && typeof collapsibleItem.isExpanded === 'function') {
                this._categoryExpandedCache.set(collapsibleItem.getId(), collapsibleItem.isExpanded());
            }
        });
    }
    _onWorkspaceChange(event) {
        if (event.type === Blockly.Events.TOOLBOX_ITEM_SELECT) {
            this._storeExpandedState();
        }
    }
    _compare(str1, str2) {
        if (typeof str1 === 'string' && typeof str2 === 'string') {
            str1 = this._prepareString(str1);
            str2 = this._prepareString(str2);
            if (str1.length > 0 && str2.length > 0) {
                const array1 = str1.split('_');
                const array2 = str2.split('_');
                for (let i1 = 0; i1 < array1.length; i1++) {
                    for (let i2 = 0; i2 < array2.length; i2++) {
                        if (array2[i2].startsWith(array1[i1])) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    _prepareString(str) {
        str = this._breakUpCamelCase(str);
        str = str.toLowerCase().trim();
        return this._replaceWhitespaceWithUnderscore(str);
    }
    _breakUpCamelCase(str) {
        return str.replace(/([A-Z])/g, ' $1');
    }
    _replaceWhitespaceWithUnderscore(str) {
        return str.replace(/\s+/g, '_');
    }
}
//# sourceMappingURL=data:application/json;base64,