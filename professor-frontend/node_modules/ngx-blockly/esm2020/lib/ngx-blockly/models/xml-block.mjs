import { Block } from './block';
export class XmlBlock extends Block {
    constructor(type, shadow = false) {
        super(type);
        this._values = [];
        this._shadow = shadow;
    }
    get values() {
        return this._values;
    }
    set values(value) {
        this._values = value;
    }
    get field() {
        return this._field;
    }
    set field(value) {
        this._field = value;
    }
    get mutation() {
        return this._mutation;
    }
    set mutation(mutation) {
        this._mutation = mutation;
    }
    toXML() {
        const tagName = this._shadow ? 'shadow' : 'block';
        let xml = `<${tagName} type="${this.type}" disabled="${this.disabled}">`;
        for (const value of this.values) {
            xml += value.toXML();
        }
        xml += this.field ? this.field.toXML() : '';
        if (this._mutation) {
            xml += this._mutation.toXML();
        }
        xml += `</${tagName}>`;
        return xml;
    }
}
export class Value {
    constructor(name, block) {
        this._name = name;
        this._block = block;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get block() {
        return this._block;
    }
    set block(value) {
        this._block = value;
    }
    toXML() {
        return `<value name="${this.name}">` + this.block.toXML() + '</value>';
    }
}
export class Field {
    constructor(name, value) {
        this._name = name;
        this._value = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    toXML() {
        return `<field name="${this.name}">` + this.value + '</field>';
    }
}
export class Mutation {
    constructor(name, value) {
        this._name = name;
        this._value = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    toXML() {
        return '<mutation ' + this.name + ' = "' + this.value + '"></mutation>';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sLWJsb2NrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWJsb2NrbHkvc3JjL2xpYi9uZ3gtYmxvY2tseS9tb2RlbHMveG1sLWJsb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFaEMsTUFBTSxPQUFPLFFBQVMsU0FBUSxLQUFLO0lBTy9CLFlBQVksSUFBWSxFQUFFLE1BQU0sR0FBRyxLQUFLO1FBQ3BDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQU5SLFlBQU8sR0FBWSxFQUFFLENBQUM7UUFPMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBYztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFZO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksUUFBUSxDQUFDLFFBQWtCO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUFFTSxLQUFLO1FBQ1IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDbEQsSUFBSSxHQUFHLEdBQUcsSUFBSSxPQUFPLFVBQVUsSUFBSSxDQUFDLElB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QUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUM7SUFDNUUsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxvY2sgfSBmcm9tICcuL2Jsb2NrJztcblxuZXhwb3J0IGNsYXNzIFhtbEJsb2NrIGV4dGVuZHMgQmxvY2sge1xuXG4gICAgcHJpdmF0ZSBfdmFsdWVzOiBWYWx1ZVtdID0gW107XG4gICAgcHJpdmF0ZSBfZmllbGQ6IEZpZWxkO1xuICAgIHByaXZhdGUgX211dGF0aW9uOiBNdXRhdGlvbjtcbiAgICBwcml2YXRlIF9zaGFkb3c6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcsIHNoYWRvdyA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKHR5cGUpO1xuICAgICAgICB0aGlzLl9zaGFkb3cgPSBzaGFkb3c7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlcygpOiBWYWx1ZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgICB9XG5cbiAgICBzZXQgdmFsdWVzKHZhbHVlOiBWYWx1ZVtdKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBmaWVsZCgpOiBGaWVsZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWVsZDtcbiAgICB9XG5cbiAgICBzZXQgZmllbGQodmFsdWU6IEZpZWxkKSB7XG4gICAgICAgIHRoaXMuX2ZpZWxkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IG11dGF0aW9uKCk6IE11dGF0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211dGF0aW9uO1xuICAgIH1cblxuICAgIHNldCBtdXRhdGlvbihtdXRhdGlvbjogTXV0YXRpb24pIHtcbiAgICAgICAgdGhpcy5fbXV0YXRpb24gPSBtdXRhdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9YTUwoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IHRoaXMuX3NoYWRvdyA/ICdzaGFkb3cnIDogJ2Jsb2NrJztcbiAgICAgICAgbGV0IHhtbCA9IGA8JHt0YWdOYW1lfSB0eXBlPVwiJHt0aGlzLnR5cGV9XCIgZGlzYWJsZWQ9XCIke3RoaXMuZGlzYWJsZWR9XCI+YDtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnZhbHVlcykge1xuICAgICAgICAgICAgeG1sICs9IHZhbHVlLnRvWE1MKCk7XG4gICAgICAgIH1cbiAgICAgICAgeG1sICs9IHRoaXMuZmllbGQgPyB0aGlzLmZpZWxkLnRvWE1MKCkgOiAnJztcbiAgICAgICAgaWYgKHRoaXMuX211dGF0aW9uKSB7XG4gICAgICAgICAgICB4bWwgKz0gdGhpcy5fbXV0YXRpb24udG9YTUwoKTtcbiAgICAgICAgfVxuICAgICAgICB4bWwgKz0gYDwvJHt0YWdOYW1lfT5gO1xuICAgICAgICByZXR1cm4geG1sO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZhbHVlIHtcbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfYmxvY2s6IFhtbEJsb2NrO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBibG9jazogWG1sQmxvY2spIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2Jsb2NrID0gYmxvY2s7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuXG4gICAgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGJsb2NrKCk6IFhtbEJsb2NrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrO1xuICAgIH1cblxuICAgIHNldCBibG9jayh2YWx1ZTogWG1sQmxvY2spIHtcbiAgICAgICAgdGhpcy5fYmxvY2sgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9YTUwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGA8dmFsdWUgbmFtZT1cIiR7dGhpcy5uYW1lfVwiPmAgKyB0aGlzLmJsb2NrLnRvWE1MKCkgKyAnPC92YWx1ZT4nO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpZWxkIHtcbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfdmFsdWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG5cbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHRvWE1MKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgPGZpZWxkIG5hbWU9XCIke3RoaXMubmFtZX1cIj5gICsgdGhpcy52YWx1ZSArICc8L2ZpZWxkPic7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTXV0YXRpb24ge1xuXG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX3ZhbHVlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuXG4gICAgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1hNTCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJzxtdXRhdGlvbiAnICsgdGhpcy5uYW1lICsgJyA9IFwiJyArIHRoaXMudmFsdWUgKyAnXCI+PC9tdXRhdGlvbj4nO1xuICAgIH1cbn1cbiJdfQ==