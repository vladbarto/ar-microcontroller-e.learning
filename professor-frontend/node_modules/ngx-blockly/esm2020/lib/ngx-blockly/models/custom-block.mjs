import { Block } from './block';
export class CustomBlock extends Block {
    constructor(type, blockMutator, ...args) {
        super(type);
        this._blockMutator = blockMutator ? blockMutator : null;
        this._args = args;
    }
    init(block) {
        this._block = block;
        this.defineBlock();
        this.block.setOnChange(function (event) {
            this.blockInstance.onChange(event);
        });
    }
    onChange(changeEvent) {
        // nothing to do
    }
    toXML() {
        return `<block type="${this.type}" disabled="${this.disabled}"></block>`;
    }
    toDartCode(block) {
        return 'Not implemented';
    }
    toJavaScriptCode(block) {
        return 'Not implemented';
    }
    toLuaCode(block) {
        return 'Not implemented';
    }
    toPHPCode(block) {
        return 'Not implemented';
    }
    toPythonCode(block) {
        return 'Not implemented';
    }
    get block() {
        return this._block;
    }
    set block(block) {
        this._block = block;
    }
    get blockMutator() {
        return this._blockMutator;
    }
    set blockMutator(mutator) {
        this._blockMutator = mutator;
    }
    get args() {
        return this._args;
    }
    set args(args) {
        this._args = args;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWJsb2NrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWJsb2NrbHkvc3JjL2xpYi9uZ3gtYmxvY2tseS9tb2RlbHMvY3VzdG9tLWJsb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHaEMsTUFBTSxPQUFnQixXQUFZLFNBQVEsS0FBSztJQU8zQyxZQUFzQixJQUFZLEVBQUUsWUFBMkIsRUFBRSxHQUFHLElBQVc7UUFDM0UsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3hELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBb0I7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFVBQVUsS0FBSztZQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJTSxRQUFRLENBQUMsV0FBNkM7UUFDekQsZ0JBQWdCO0lBQ3BCLENBQUM7SUFFTSxLQUFLO1FBQ1IsT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksZUFBZSxJQUFJLENBQUMsUUFBUSxZQUFZLENBQUM7SUFDN0UsQ0FBQztJQUVNLFVBQVUsQ0FBQyxLQUFvQjtRQUNsQyxPQUFPLGlCQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxLQUFvQjtRQUN4QyxPQUFPLGlCQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFTSxTQUFTLENBQUMsS0FBb0I7UUFDakMsT0FBTyxpQkFBaUIsQ0FBQztJQUM3QixDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQW9CO1FBQ2pDLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVNLFlBQVksQ0FBQyxLQUFvQjtRQUNwQyxPQUFPLGlCQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQXFCO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksWUFBWSxDQUFDLE9BQXFCO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLElBQVc7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxvY2tNdXRhdG9yIH0gZnJvbSAnLi9ibG9jay1tdXRhdG9yJztcbmltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi9ibG9jayc7XG5pbXBvcnQgKiBhcyBCbG9ja2x5IGZyb20gJ2Jsb2NrbHkvY29yZSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdXN0b21CbG9jayBleHRlbmRzIEJsb2NrIHtcblxuICAgIHByaXZhdGUgX2Jsb2NrOiBCbG9ja2x5LkJsb2NrO1xuICAgIHByaXZhdGUgX2Jsb2NrTXV0YXRvcjogQmxvY2tNdXRhdG9yO1xuICAgIHByaXZhdGUgX2FyZ3M6IGFueVtdO1xuXG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBibG9ja011dGF0b3I/OiBCbG9ja011dGF0b3IsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIHN1cGVyKHR5cGUpO1xuICAgICAgICB0aGlzLl9ibG9ja011dGF0b3IgPSBibG9ja011dGF0b3IgPyBibG9ja011dGF0b3IgOiBudWxsO1xuICAgICAgICB0aGlzLl9hcmdzID0gYXJncztcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdChibG9jazogQmxvY2tseS5CbG9jaykge1xuICAgICAgICB0aGlzLl9ibG9jayA9IGJsb2NrO1xuICAgICAgICB0aGlzLmRlZmluZUJsb2NrKCk7XG4gICAgICAgIHRoaXMuYmxvY2suc2V0T25DaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmJsb2NrSW5zdGFuY2Uub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgZGVmaW5lQmxvY2soKTtcblxuICAgIHB1YmxpYyBvbkNoYW5nZShjaGFuZ2VFdmVudDogQmxvY2tseS5FdmVudHMuQWJzdHJhY3RFdmVudEpzb24pIHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1hNTCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYDxibG9jayB0eXBlPVwiJHt0aGlzLnR5cGV9XCIgZGlzYWJsZWQ9XCIke3RoaXMuZGlzYWJsZWR9XCI+PC9ibG9jaz5gO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b0RhcnRDb2RlKGJsb2NrOiBCbG9ja2x5LkJsb2NrKTogc3RyaW5nIHwgYW55W10ge1xuICAgICAgICByZXR1cm4gJ05vdCBpbXBsZW1lbnRlZCc7XG4gICAgfVxuXG4gICAgcHVibGljIHRvSmF2YVNjcmlwdENvZGUoYmxvY2s6IEJsb2NrbHkuQmxvY2spOiBzdHJpbmcgfCBhbnlbXSB7XG4gICAgICAgIHJldHVybiAnTm90IGltcGxlbWVudGVkJztcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9MdWFDb2RlKGJsb2NrOiBCbG9ja2x5LkJsb2NrKTogc3RyaW5nIHwgYW55W10ge1xuICAgICAgICByZXR1cm4gJ05vdCBpbXBsZW1lbnRlZCc7XG4gICAgfVxuXG4gICAgcHVibGljIHRvUEhQQ29kZShibG9jazogQmxvY2tseS5CbG9jayk6IHN0cmluZyB8IGFueVtdIHtcbiAgICAgICAgcmV0dXJuICdOb3QgaW1wbGVtZW50ZWQnO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1B5dGhvbkNvZGUoYmxvY2s6IEJsb2NrbHkuQmxvY2spOiBzdHJpbmcgfCBhbnlbXSB7XG4gICAgICAgIHJldHVybiAnTm90IGltcGxlbWVudGVkJztcbiAgICB9XG5cbiAgICBnZXQgYmxvY2soKTogIEJsb2NrbHkuQmxvY2sge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2s7XG4gICAgfVxuXG4gICAgc2V0IGJsb2NrKGJsb2NrOiAgQmxvY2tseS5CbG9jaykge1xuICAgICAgICB0aGlzLl9ibG9jayA9IGJsb2NrO1xuICAgIH1cblxuICAgIGdldCBibG9ja011dGF0b3IoKTogQmxvY2tNdXRhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrTXV0YXRvcjtcbiAgICB9XG5cbiAgICBzZXQgYmxvY2tNdXRhdG9yKG11dGF0b3I6IEJsb2NrTXV0YXRvcikge1xuICAgICAgICB0aGlzLl9ibG9ja011dGF0b3IgPSBtdXRhdG9yO1xuICAgIH1cblxuICAgIGdldCBhcmdzKCk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FyZ3M7XG4gICAgfVxuXG4gICAgc2V0IGFyZ3MoYXJnczogYW55W10pIHtcbiAgICAgICAgdGhpcy5fYXJncyA9IGFyZ3M7XG4gICAgfVxufVxuIl19